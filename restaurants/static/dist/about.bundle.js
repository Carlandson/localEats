(()=>{"use strict";var __webpack_modules__={751:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('/* harmony import */ var _components_toast_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);\n/* harmony import */ var _utils_subpagesAPI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(795);\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n\n\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  var _document$getElementB;\n  var business = JSON.parse(document.getElementById(\'business\').textContent);\n\n  // Accordion functionality\n  var accordionHeaders = document.querySelectorAll(\'.accordion-header\');\n  accordionHeaders.forEach(function (header) {\n    header.addEventListener(\'click\', function (e) {\n      // Don\'t trigger accordion if clicking the toggle switch\n      if (e.target.type === \'checkbox\' || e.target.closest(\'.relative\')) {\n        return;\n      }\n      var targetId = this.dataset.target;\n      var content = document.getElementById(targetId);\n      var icon = this.querySelector(\'.accordion-icon\');\n      var isExpanded = this.dataset.expanded === \'true\';\n\n      // Toggle content visibility\n      content.classList.toggle(\'hidden\');\n\n      // Update expanded state and rotate icon\n      this.dataset.expanded = (!isExpanded).toString();\n      icon.style.transform = isExpanded ? \'rotate(0deg)\' : \'rotate(180deg)\';\n    });\n  });\n\n  // Toggle switch functionality\n  var toggles = document.querySelectorAll(\'input[type="checkbox"]\');\n  toggles.forEach(function (toggle) {\n    toggle.addEventListener(\'change\', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var section, isEnabled, contentDiv, csrfToken, response;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            section = this.name;\n            isEnabled = this.checked;\n            contentDiv = document.querySelector("[data-section=\\"".concat(section, "\\"]"));\n            _context.prev = 3;\n            // Show loading state\n            this.disabled = true;\n            if (contentDiv) {\n              contentDiv.classList.toggle(\'hidden\', !isEnabled);\n            }\n\n            // Get CSRF token\n            csrfToken = document.querySelector(\'[name=csrfmiddlewaretoken]\').value; // Send update to server\n            _context.next = 9;\n            return fetch("/".concat(business, "/about/settings/"), {\n              method: \'POST\',\n              headers: {\n                \'Content-Type\': \'application/json\',\n                \'X-CSRFToken\': csrfToken\n              },\n              body: JSON.stringify({\n                fieldType: \'boolean\',\n                fieldName: section,\n                value: isEnabled,\n                page_type: \'about\'\n              })\n            });\n          case 9:\n            response = _context.sent;\n            if (response.ok) {\n              _context.next = 12;\n              break;\n            }\n            throw new Error(\'Update failed\');\n          case 12:\n            // Show success message\n            (0,_components_toast_js__WEBPACK_IMPORTED_MODULE_1__/* .showToast */ .P)(\'Changes saved successfully!\');\n            _context.next = 21;\n            break;\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context["catch"](3);\n            console.error(\'Update failed:\', _context.t0);\n            // Revert the toggle if the update failed\n            this.checked = !this.checked;\n            (0,_components_toast_js__WEBPACK_IMPORTED_MODULE_1__/* .showToast */ .P)(\'Failed to update setting. Please try again.\', \'error\');\n            if (contentDiv) {\n              contentDiv.classList.toggle(\'hidden\', !this.checked);\n            }\n          case 21:\n            _context.prev = 21;\n            this.disabled = false;\n            return _context.finish(21);\n          case 24:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, this, [[3, 15, 21, 24]]);\n    })));\n  });\n  var saveButtons = document.querySelectorAll(\'.save-button\');\n  saveButtons.forEach(function (button) {\n    button.addEventListener(\'click\', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var section, container, originalText, csrfToken, data, missionInput, valuesInput, response;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            section = this.dataset.section;\n            container = this.closest(\'div\');\n            originalText = this.textContent;\n            _context2.prev = 3;\n            // Show loading state\n            this.textContent = \'Saving...\';\n            this.disabled = true;\n\n            // Get CSRF token\n            csrfToken = document.querySelector(\'[name=csrfmiddlewaretoken]\').value; // Prepare the data based on section\n            data = {\n              fieldName: section\n            }; // Add section-specific data\n            _context2.t0 = section;\n            _context2.next = _context2.t0 === \'content\' ? 11 : _context2.t0 === \'history\' ? 13 : _context2.t0 === \'team_members\' ? 15 : _context2.t0 === \'mission_values\' ? 17 : 21;\n            break;\n          case 11:\n            data = _objectSpread(_objectSpread({}, data), {}, {\n              content: container.querySelector(\'[name="content"]\').value\n            });\n            return _context2.abrupt("break", 21);\n          case 13:\n            data = _objectSpread(_objectSpread({}, data), {}, {\n              history: container.querySelector(\'[name="history"]\').value\n            });\n            return _context2.abrupt("break", 21);\n          case 15:\n            data = _objectSpread(_objectSpread({}, data), {}, {\n              team_members: container.querySelector(\'[name="team_members"]\').value\n            });\n            return _context2.abrupt("break", 21);\n          case 17:\n            missionInput = container.querySelector(\'[name="mission_statement"]\');\n            valuesInput = container.querySelector(\'[name="core_values"]\');\n            data = _objectSpread(_objectSpread({}, data), {}, {\n              mission_statement: (missionInput === null || missionInput === void 0 ? void 0 : missionInput.value) || \'\',\n              core_values: (valuesInput === null || valuesInput === void 0 ? void 0 : valuesInput.value) || \'\'\n            });\n            return _context2.abrupt("break", 21);\n          case 21:\n            _context2.next = 23;\n            return fetch("/".concat(business, "/about/settings/"), {\n              method: \'POST\',\n              headers: {\n                \'Content-Type\': \'application/json\',\n                \'X-CSRFToken\': csrfToken\n              },\n              body: JSON.stringify(data)\n            });\n          case 23:\n            response = _context2.sent;\n            if (response.ok) {\n              _context2.next = 26;\n              break;\n            }\n            throw new Error(\'Update failed\');\n          case 26:\n            // Show success message using the toast\n            (0,_components_toast_js__WEBPACK_IMPORTED_MODULE_1__/* .showToast */ .P)(\'Changes saved successfully!\');\n            _context2.next = 33;\n            break;\n          case 29:\n            _context2.prev = 29;\n            _context2.t1 = _context2["catch"](3);\n            console.error(\'Save failed:\', _context2.t1);\n            (0,_components_toast_js__WEBPACK_IMPORTED_MODULE_1__/* .showToast */ .P)(\'Failed to save changes. Please try again.\');\n          case 33:\n            _context2.prev = 33;\n            // Reset button state\n            this.textContent = originalText;\n            this.disabled = false;\n            return _context2.finish(33);\n          case 37:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, this, [[3, 29, 33, 37]]);\n    })));\n  });\n\n  // Image preview functionality\n  (_document$getElementB = document.getElementById(\'id_image\')) === null || _document$getElementB === void 0 || _document$getElementB.addEventListener(\'change\', function (e) {\n    var previewContainer = document.getElementById(\'image-preview-container\');\n    var preview = document.getElementById(\'image-preview\');\n    var file = e.target.files[0];\n    if (file) {\n      previewContainer === null || previewContainer === void 0 || previewContainer.classList.remove(\'hidden\');\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        if (preview) preview.src = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    } else {\n      previewContainer === null || previewContainer === void 0 || previewContainer.classList.add(\'hidden\');\n      if (preview) preview.src = \'\';\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///751\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,B,F,U)=>{if(!B){var e=1/0;for(n=0;n<deferred.length;n++){for(var[B,F,U]=deferred[n],t=!0,s=0;s<B.length;s++)(!1&U||e>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](B[s])))?B.splice(s--,1):(t=!1,U<e&&(e=U));if(t){deferred.splice(n--,1);var E=F();void 0!==E&&(Q=E)}}return Q}U=U||0;for(var n=deferred.length;n>0&&deferred[n-1][2]>U;n--)deferred[n]=deferred[n-1];deferred[n]=[B,F,U]},__webpack_require__.d=(Q,B)=>{for(var F in B)__webpack_require__.o(B,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:B[F]})},__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B),(()=>{var Q={594:0};__webpack_require__.O.j=B=>0===Q[B];var B=(B,F)=>{var U,e,[t,s,E]=F,n=0;if(t.some((B=>0!==Q[B]))){for(U in s)__webpack_require__.o(s,U)&&(__webpack_require__.m[U]=s[U]);if(E)var I=E(__webpack_require__)}for(B&&B(F);n<t.length;n++)e=t[n],__webpack_require__.o(Q,e)&&Q[e]&&Q[e][0](),Q[e]=0;return __webpack_require__.O(I)},F=self.webpackChunkstatic=self.webpackChunkstatic||[];F.forEach(B.bind(null,0)),F.push=B.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[76],(()=>__webpack_require__(751)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();