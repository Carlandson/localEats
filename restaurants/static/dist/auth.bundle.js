(()=>{var __webpack_modules__={262:()=>{eval("document.addEventListener('DOMContentLoaded', function () {\n  var logoutBtn = document.getElementById('logoutBtn');\n  var logoutPopup = document.getElementById('logoutPopup');\n  var confirmLogout = document.getElementById('confirmLogout');\n  var cancelLogout = document.getElementById('cancelLogout');\n  if (logoutBtn) {\n    logoutBtn.addEventListener('click', function () {\n      logoutPopup.classList.remove('hidden');\n    });\n  }\n  if (cancelLogout) {\n    cancelLogout.addEventListener('click', function () {\n      logoutPopup.classList.add('hidden');\n    });\n  }\n  if (confirmLogout) {\n    confirmLogout.addEventListener('click', function () {\n      var logoutUrl = this.getAttribute('data-logout-url');\n      if (!logoutUrl) {\n        console.error('Logout URL not set');\n        return;\n      }\n\n      // Function to get CSRF token from cookies\n      function getCookie(name) {\n        var cookieValue = null;\n        if (document.cookie && document.cookie !== '') {\n          var cookies = document.cookie.split(';');\n          for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === name + '=') {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n            }\n          }\n        }\n        return cookieValue;\n      }\n      var csrfToken = getCookie('csrftoken');\n      fetch(logoutUrl, {\n        method: 'POST',\n        headers: {\n          'X-CSRFToken': csrfToken,\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        credentials: 'same-origin' // This ensures cookies are sent with the request\n      }).then(function (response) {\n        if (response.ok) {\n          window.location.href = '/'; // Redirect to index page after logout\n        } else {\n          console.error('Logout failed');\n        }\n      })[\"catch\"](function (error) {\n        console.error('Error:', error);\n      });\n    });\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYyLmpzIiwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwibG9nb3V0QnRuIiwiZ2V0RWxlbWVudEJ5SWQiLCJsb2dvdXRQb3B1cCIsImNvbmZpcm1Mb2dvdXQiLCJjYW5jZWxMb2dvdXQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJsb2dvdXRVcmwiLCJnZXRBdHRyaWJ1dGUiLCJjb25zb2xlIiwiZXJyb3IiLCJnZXRDb29raWUiLCJuYW1lIiwiY29va2llVmFsdWUiLCJjb29raWUiLCJjb29raWVzIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwidHJpbSIsInN1YnN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsImNzcmZUb2tlbiIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImNyZWRlbnRpYWxzIiwidGhlbiIsInJlc3BvbnNlIiwib2siLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXRpYy8uL3Jlc3RhdXJhbnRzL3N0YXRpYy9qcy9hdXRoL2xvZ291dC5qcz8wMGU2Il0sInNvdXJjZXNDb250ZW50IjpbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcclxuICAgIGNvbnN0IGxvZ291dEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2dvdXRCdG4nKTtcclxuICAgIGNvbnN0IGxvZ291dFBvcHVwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ291dFBvcHVwJyk7XHJcbiAgICBjb25zdCBjb25maXJtTG9nb3V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbmZpcm1Mb2dvdXQnKTtcclxuICAgIGNvbnN0IGNhbmNlbExvZ291dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW5jZWxMb2dvdXQnKTtcclxuXHJcbiAgICBpZiAobG9nb3V0QnRuKSB7XHJcbiAgICAgICAgbG9nb3V0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGxvZ291dFBvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjYW5jZWxMb2dvdXQpIHtcclxuICAgICAgICBjYW5jZWxMb2dvdXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbG9nb3V0UG9wdXAuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbmZpcm1Mb2dvdXQpIHtcclxuICAgICAgICBjb25maXJtTG9nb3V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvZ291dFVybCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWxvZ291dC11cmwnKTtcclxuICAgICAgICAgICAgaWYgKCFsb2dvdXRVcmwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ291dCBVUkwgbm90IHNldCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBGdW5jdGlvbiB0byBnZXQgQ1NSRiB0b2tlbiBmcm9tIGNvb2tpZXNcclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb29raWVWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuY29va2llICYmIGRvY3VtZW50LmNvb2tpZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvb2tpZSA9IGNvb2tpZXNbaV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29va2llLnN1YnN0cmluZygwLCBuYW1lLmxlbmd0aCArIDEpID09PSAobmFtZSArICc9JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZVZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcobmFtZS5sZW5ndGggKyAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb29raWVWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgY3NyZlRva2VuID0gZ2V0Q29va2llKCdjc3JmdG9rZW4nKTtcclxuXHJcbiAgICAgICAgICAgIGZldGNoKGxvZ291dFVybCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ1gtQ1NSRlRva2VuJzogY3NyZlRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyAgLy8gVGhpcyBlbnN1cmVzIGNvb2tpZXMgYXJlIHNlbnQgd2l0aCB0aGUgcmVxdWVzdFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvJzsgIC8vIFJlZGlyZWN0IHRvIGluZGV4IHBhZ2UgYWZ0ZXIgbG9nb3V0XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ291dCBmYWlsZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsWUFBVztFQUNyRCxJQUFNQyxTQUFTLEdBQUdGLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLFdBQVcsQ0FBQztFQUN0RCxJQUFNQyxXQUFXLEdBQUdKLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLGFBQWEsQ0FBQztFQUMxRCxJQUFNRSxhQUFhLEdBQUdMLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLGVBQWUsQ0FBQztFQUM5RCxJQUFNRyxZQUFZLEdBQUdOLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLGNBQWMsQ0FBQztFQUU1RCxJQUFJRCxTQUFTLEVBQUU7SUFDWEEsU0FBUyxDQUFDRCxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBVztNQUMzQ0csV0FBVyxDQUFDRyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0VBQ047RUFFQSxJQUFJRixZQUFZLEVBQUU7SUFDZEEsWUFBWSxDQUFDTCxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBVztNQUM5Q0csV0FBVyxDQUFDRyxTQUFTLENBQUNFLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDdkMsQ0FBQyxDQUFDO0VBQ047RUFFQSxJQUFJSixhQUFhLEVBQUU7SUFDZkEsYUFBYSxDQUFDSixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBVztNQUMvQyxJQUFNUyxTQUFTLEdBQUcsSUFBSSxDQUFDQyxZQUFZLENBQUMsaUJBQWlCLENBQUM7TUFDdEQsSUFBSSxDQUFDRCxTQUFTLEVBQUU7UUFDWkUsT0FBTyxDQUFDQyxLQUFLLENBQUMsb0JBQW9CLENBQUM7UUFDbkM7TUFDSjs7TUFFQTtNQUNBLFNBQVNDLFNBQVNBLENBQUNDLElBQUksRUFBRTtRQUNyQixJQUFJQyxXQUFXLEdBQUcsSUFBSTtRQUN0QixJQUFJaEIsUUFBUSxDQUFDaUIsTUFBTSxJQUFJakIsUUFBUSxDQUFDaUIsTUFBTSxLQUFLLEVBQUUsRUFBRTtVQUMzQyxJQUFNQyxPQUFPLEdBQUdsQixRQUFRLENBQUNpQixNQUFNLENBQUNFLEtBQUssQ0FBQyxHQUFHLENBQUM7VUFDMUMsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdGLE9BQU8sQ0FBQ0csTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtZQUNyQyxJQUFNSCxNQUFNLEdBQUdDLE9BQU8sQ0FBQ0UsQ0FBQyxDQUFDLENBQUNFLElBQUksQ0FBQyxDQUFDO1lBQ2hDLElBQUlMLE1BQU0sQ0FBQ00sU0FBUyxDQUFDLENBQUMsRUFBRVIsSUFBSSxDQUFDTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQU1OLElBQUksR0FBRyxHQUFJLEVBQUU7Y0FDdkRDLFdBQVcsR0FBR1Esa0JBQWtCLENBQUNQLE1BQU0sQ0FBQ00sU0FBUyxDQUFDUixJQUFJLENBQUNNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztjQUNuRTtZQUNKO1VBQ0o7UUFDSjtRQUNBLE9BQU9MLFdBQVc7TUFDdEI7TUFFQSxJQUFNUyxTQUFTLEdBQUdYLFNBQVMsQ0FBQyxXQUFXLENBQUM7TUFFeENZLEtBQUssQ0FBQ2hCLFNBQVMsRUFBRTtRQUNiaUIsTUFBTSxFQUFFLE1BQU07UUFDZEMsT0FBTyxFQUFFO1VBQ0wsYUFBYSxFQUFFSCxTQUFTO1VBQ3hCLGNBQWMsRUFBRTtRQUNwQixDQUFDO1FBQ0RJLFdBQVcsRUFBRSxhQUFhLENBQUU7TUFDaEMsQ0FBQyxDQUFDLENBQ0RDLElBQUksQ0FBQyxVQUFBQyxRQUFRLEVBQUk7UUFDZCxJQUFJQSxRQUFRLENBQUNDLEVBQUUsRUFBRTtVQUNiQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFFO1FBQ2pDLENBQUMsTUFBTTtVQUNIdkIsT0FBTyxDQUFDQyxLQUFLLENBQUMsZUFBZSxDQUFDO1FBQ2xDO01BQ0osQ0FBQyxDQUFDLFNBQ0ksQ0FBQyxVQUFBQSxLQUFLLEVBQUk7UUFDWkQsT0FBTyxDQUFDQyxLQUFLLENBQUMsUUFBUSxFQUFFQSxLQUFLLENBQUM7TUFDbEMsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDO0VBQ047QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///262\n")}},__webpack_exports__={};__webpack_modules__[262]()})();