(()=>{var __webpack_modules__={832:()=>{eval('function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nvar eatery;\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  eatery = JSON.parse(document.getElementById(\'kitchen\').textContent);\n  existingCourses = JSON.parse(document.getElementById(\'existing_courses\').textContent);\n  var accordionTriggers = document.querySelectorAll(\'.accordion-trigger\');\n  accordionTriggers.forEach(function (trigger) {\n    trigger.addEventListener(\'click\', function () {\n      var target = document.getElementById(trigger.dataset.target);\n      var arrow = trigger.querySelector(\'svg\'); // Select the arrow icon\n\n      // Toggle panel visibility\n      target.classList.toggle(\'hidden\');\n\n      // Rotate the arrow based on panel\'s visibility\n      if (target.classList.contains(\'hidden\')) {\n        trigger.classList.remove(\'bg-gray-100\', \'hover:bg-gray-400\');\n        trigger.classList.add(\'bg-white\', \'hover:bg-gray-400\');\n        arrow.classList.remove(\'rotate-90\'); // Reset rotation when hidden\n      } else {\n        trigger.classList.remove(\'bg-white\', \'hover:bg-gray-50\'); // Open state\n        trigger.classList.add(\'bg-gray-100\', \'hover:bg-gray-400\');\n        arrow.classList.add(\'rotate-90\'); // Apply rotation when open\n      }\n\n      // Optional: Close other panels if needed\n      // accordionTriggers.forEach(otherTrigger => {\n      //     if (otherTrigger !== trigger) {\n      //         const otherTarget = document.getElementById(otherTrigger.dataset.target);\n      //         const otherArrow = otherTrigger.querySelector(\'svg\');\n      //         otherTarget.classList.add(\'hidden\');\n      //         otherArrow.classList.remove(\'rotate-90\');\n      //     }\n      // });\n    });\n  });\n  document.addEventListener(\'click\', function (e) {\n    // Add Course button\n    if (e.target.matches(\'#add\')) {\n      e.preventDefault();\n      var submission = document.querySelector(\'#addCourse\');\n      addCourse(submission.value, eatery, existingCourses);\n    }\n\n    // Submit Dish button\n    if (e.target.matches(\'.submitDish\')) {\n      addDish(e.target.id);\n    }\n\n    // Edit Dish button\n    if (e.target.matches(\'.editDish\')) {\n      var itemId = e.target.id.replace(\'e\', \'\');\n      editDish(itemId);\n    }\n\n    // Delete Dish button\n    if (e.target.matches(\'.deleteDish\')) {\n      var dishId = e.target.id.replace(\'d\', \'\');\n      deleteDish(dishId);\n    }\n\n    // Delete Course button\n    if (e.target.closest(\'.deleteCourse\')) {\n      var courseId = e.target.closest(\'.deleteCourse\').getAttribute(\'data-course-id\');\n      deleteCourse(courseId);\n    }\n    if (e.target.matches(\'.editDescription\') || e.target.closest(\'.editDescription\')) {\n      var button = e.target.closest(\'.editDescription\') || e.target;\n      var _courseId = button.dataset.courseId;\n      editCourseDescription(_courseId);\n    }\n\n    // Save Description button\n    if (e.target.matches(\'.saveDescription\')) {\n      var _courseId2 = e.target.dataset.courseId;\n      saveCourseDescription(_courseId2);\n    }\n    // Edit Note button\n    if (e.target.matches(\'.editNote\') || e.target.closest(\'.editNote\')) {\n      var _button = e.target.closest(\'.editNote\') || e.target;\n      var _courseId3 = _button.dataset.courseId;\n      editCourseNote(_courseId3);\n    }\n\n    // Save Note button\n    if (e.target.matches(\'.saveNote\')) {\n      var _courseId4 = e.target.dataset.courseId;\n      saveCourseNote(_courseId4);\n    }\n    // Add Side Option button\n    if (e.target.matches(\'.addSideOption\')) {\n      var _courseId5 = e.target.dataset.courseId;\n      showSideOptionForm(_courseId5);\n    }\n\n    // Edit Side Option button\n    if (e.target.closest(\'.editSideOption\')) {\n      var sideId = e.target.closest(\'.editSideOption\').dataset.sideId;\n      editSideOption(sideId);\n    }\n\n    // Delete Side Option button\n    if (e.target.closest(\'.deleteSideOption\')) {\n      var _sideId = e.target.closest(\'.deleteSideOption\').dataset.sideId;\n      deleteSideOption(_sideId);\n    }\n  });\n});\nvar getFormHTML = function getFormHTML() {\n  var isEdit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var dishId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'\';\n  var currentValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return "\\n    <form id=\\"".concat(isEdit ? \'editDish\' + dishId : \'createDish\', "\\" class=\\"p-1\\" action=\\"post\\">\\n        <div class=\\"form-group\\">\\n            <input type=\\"text\\" \\n                   class=\\"p-2 m-1 border-double border-4 border-indigo-200\\" \\n                   placeholder=\\"Name of Dish\\" \\n                   id=\\"").concat(isEdit ? \'dishName\' + dishId : \'dishName\', "\\"\\n                   value=\\"").concat(isEdit ? currentValues.name : \'\', "\\" \\n                   required>\\n            <input type=\\"number\\" \\n                   class=\\"p-2 m-1 border-double border-4 border-indigo-200\\" \\n                   placeholder=\\"Price\\" \\n                   step=\\"any\\" \\n                   id=\\"").concat(isEdit ? \'dishPrice\' + dishId : \'dishPrice\', "\\"\\n                   value=\\"").concat(isEdit ? currentValues.price : \'\', "\\" \\n                   required>\\n            <div class=\\"image-upload-container\\">\\n                <input type=\\"file\\" \\n                       class=\\"p-2 m-1 border-double border-4 border-indigo-200\\" \\n                       accept=\\"image/*\\"\\n                       id=\\"").concat(isEdit ? \'dishImage\' + dishId : \'dishImage\', "\\">\\n                ").concat(isEdit && currentValues.image ? "\\n                    <div class=\\"current-image\\">\\n                        <img src=\\"".concat(currentValues.image, "\\" class=\\"h-20 w-20 object-contain\\" alt=\\"Current image\\">\\n                        <p class=\\"text-sm text-gray-500\\">Current image</p>\\n                    </div>\\n                ") : \'\', "\\n            </div>\\n            <textarea class=\\"form-control p-2 m-1\\" \\n                      id=\\"").concat(isEdit ? \'dishDescription\' + dishId : \'dishDescription\', "\\" \\n                      rows=\\"3\\" \\n                      placeholder=\\"Description\\">").concat(isEdit ? currentValues.description : \'\', "</textarea>\\n        </div>\\n        <button type=\\"submit\\" class=\\"bg-blue-500 m-2 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\\">\\n            ").concat(isEdit ? \'Save Changes\' : \'Add Dish\', "\\n        </button>\\n        <button type=\\"button\\" \\n                class=\\"").concat(isEdit ? \'cancel-edit\' : \'cancel-add\', " bg-gray-500 m-2 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\\">\\n            Cancel\\n        </button>\\n    </form>\\n");\n};\nfunction createDishHTML(dishId, formData) {\n  var imageUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return "\\n        <div class=\\"text-center\\">\\n            <h3 class=\\"text-xl font-bold mb-2\\">".concat(formData.name, "</h3>\\n            ").concat(imageUrl ? "<img src=\\"".concat(imageUrl, "\\" class=\\"mx-auto object-contain h-40 w-40\\" alt=\\"").concat(formData.name, "\\">") : "<div class=\\"h-40 w-40 mx-auto flex items-center justify-center bg-gray-100 rounded-lg border-2 border-dashed border-gray-300\\">\\n                    <span class=\\"text-gray-400\\">No Image</span>\\n                </div>", "\\n            <p class=\\"mt-2 font-semibold\\">Price: $").concat(formData.price, "</p>\\n        </div>\\n        <div class=\\"text-center\\">\\n            <h4 class=\\"font-semibold mb-2\\">Description:</h4>\\n            <p>").concat(formData.description, "</p>\\n        </div>\\n        <div class=\\"md:text-right flex md:justify-end items-center space-x-2\\">\\n            <button class=\\"editDish px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-white rounded transition-colors duration-200\\" \\n                    id=\\"e").concat(dishId, "\\">Edit</button>\\n            <button class=\\"deleteDish px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded transition-colors duration-200\\" \\n                    id=\\"d").concat(dishId, "\\">Delete</button>\\n        </div>\\n    ");\n}\nfunction handleImageUpload(fileInput) {\n  return new Promise(function (resolve, reject) {\n    if (!fileInput.files || !fileInput.files[0]) {\n      resolve(null);\n      return;\n    }\n    var file = fileInput.files[0];\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      resolve(e.target.result);\n    };\n    reader.onerror = function (e) {\n      reject(e);\n    };\n    reader.readAsDataURL(file);\n  });\n}\nfunction addCourse(dishData, currentKitchen, existingCourses) {\n  if (existingCourses.map(function (course) {\n    return course.toLowerCase();\n  }).includes(dishData.toLowerCase())) {\n    alert(\'A course with this name already exists. Please choose a different name.\');\n    return;\n  }\n  fetch("/".concat(currentKitchen, "/menu/add_course/"), {\n    method: "POST",\n    headers: {\n      \'Content-Type\': \'application/json\',\n      \'X-CSRFToken\': getCookie(\'csrftoken\')\n    },\n    body: JSON.stringify({\n      course_name: dishData\n    })\n  }).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\'Network response was not ok\');\n    }\n    return response.json();\n  }).then(function (result) {\n    location.reload();\n  })["catch"](function (error) {\n    console.error(\'Error:\', error);\n  });\n}\n\n// Add this function to get CSRF token\nfunction getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== \'\') {\n    var cookies = document.cookie.split(\';\');\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      if (cookie.substring(0, name.length + 1) === name + \'=\') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\nfunction addDish(course) {\n  var currentCourse = course.replace(\'submit\', "");\n  var addButton = document.getElementById(course);\n\n  // Find the correct panel by traversing up and then finding the container\n  var parentPanel = addButton.closest(\'.accordion-collapse\') || addButton.closest(\'[id^="panel"]\');\n  if (!parentPanel) {\n    console.error(\'Could not find parent panel\');\n    return;\n  }\n\n  // Store the original button\'s parent\n  // const buttonContainer = addButton.parentNode;\n\n  var buttonContainer = addButton.closest(\'.text-center\');\n  var deleteButton = buttonContainer.querySelector(\'.deleteCourse\');\n  buttonContainer.style.display = \'none\';\n  var formDiv = document.createElement(\'div\');\n  formDiv.innerHTML = getFormHTML(false);\n  buttonContainer.parentNode.insertBefore(formDiv, buttonContainer);\n  // Replace the button with the form\n  // addButton.replaceWith(formDiv);\n\n  // Add cancel button functionality\n  formDiv.querySelector(\'.cancel-add\').addEventListener(\'click\', function () {\n    // Restore the button to its original container\n    buttonContainer.appendChild(addButton);\n    formDiv.remove();\n  });\n  document.querySelector(\'#createDish\').addEventListener(\'submit\', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event) {\n      var formData, imageInput, imageData;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            event.preventDefault();\n            formData = {\n              name: document.querySelector("#dishName").value,\n              price: document.querySelector("#dishPrice").value,\n              description: document.querySelector("#dishDescription").value,\n              course: currentCourse\n            }; // Get the image data if it exists\n            imageInput = document.querySelector(\'#dishImage\');\n            if (!(imageInput && imageInput.files[0])) {\n              _context2.next = 8;\n              break;\n            }\n            _context2.next = 6;\n            return handleImageUpload(imageInput);\n          case 6:\n            imageData = _context2.sent;\n            formData.image = imageData;\n          case 8:\n            fetch("/".concat(eatery, "/menu/add_dish/"), {\n              method: \'POST\',\n              headers: {\n                \'Content-Type\': \'application/json\',\n                \'X-CSRFToken\': getCookie(\'csrftoken\')\n              },\n              body: JSON.stringify(formData)\n            }).then(/*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {\n                var data;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return response.json();\n                    case 2:\n                      data = _context.sent;\n                      if (response.ok) {\n                        _context.next = 5;\n                        break;\n                      }\n                      throw new Error(data.error);\n                    case 5:\n                      return _context.abrupt("return", data);\n                    case 6:\n                    case "end":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }));\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }()).then(function (result) {\n              var newDishArticle = document.createElement(\'article\');\n              newDishArticle.id = "o".concat(result.dish_id);\n              newDishArticle.className = \'border rounded-lg p-4 mb-4 grid md:grid-cols-3 gap-4\';\n              newDishArticle.innerHTML = createDishHTML(result.dish_id, formData, result.image_url);\n\n              // Insert the new dish before the button container\n              buttonContainer.insertAdjacentElement(\'beforebegin\', newDishArticle);\n\n              // Show the original button container\n              buttonContainer.style.display = \'\';\n              formDiv.remove();\n            })["catch"](function (error) {\n              console.error(\'Error:\', error);\n              // Show the original button container on error\n              buttonContainer.style.display = \'\';\n              formDiv.remove();\n              alert(error.message || \'Error adding dish. Please try again.\');\n            });\n          case 9:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\nfunction restoreAddButton(course, currentCourse, formDiv) {\n  var buttonContainer = document.createElement(\'div\');\n  buttonContainer.className = \'text-center space-y-2 mt-4\';\n  buttonContainer.innerHTML = "\\n        <button id=\\"".concat(course, "\\" \\n                class=\\"submitDish w-full md:w-96 px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-white rounded transition-colors duration-200\\">\\n            Add a dish to ").concat(currentCourse, "\\n        </button>\\n    ");\n\n  // Add the click event listener to the new button\n  buttonContainer.querySelector(\'.submitDish\').addEventListener(\'click\', function () {\n    return addDish(course);\n  });\n\n  // Replace the form with the button\n  formDiv.replaceWith(buttonContainer);\n}\n\n// function restoreAddButton(course, currentCourse) {\n//     const swapDiv = document.querySelector(\'#createDish\').parentElement;\n//     const addButton = document.createElement(\'button\');\n//     addButton.id = course;\n//     addButton.className = \'submitDish text-center w-60 rounded m-2 bg-emerald-300 md:w-96\';\n//     addButton.textContent = `Add a dish to ${currentCourse}`;\n//     addButton.addEventListener(\'click\', () => addDish(course));\n//     swapDiv.replaceWith(addButton);\n// }\n\nfunction cancelAdd(course) {\n  var currentCourse = course.replace(\'submit\', "");\n  restoreAddButton(course, currentCourse);\n}\n//click to open a form with prefilled information for editing\nfunction editDish(dishId) {\n  var _dishElement$querySel, _dishElement$querySel2, _dishElement$querySel3, _dishElement$querySel4;\n  var dishElement = document.getElementById("o".concat(dishId));\n  if (!dishElement) {\n    console.error(\'Could not find dish element\');\n    return;\n  }\n\n  // Get current dish data\n  var currentValues = {\n    name: ((_dishElement$querySel = dishElement.querySelector(\'h3\')) === null || _dishElement$querySel === void 0 ? void 0 : _dishElement$querySel.textContent) || \'\',\n    price: ((_dishElement$querySel2 = dishElement.querySelector(\'.font-semibold\')) === null || _dishElement$querySel2 === void 0 ? void 0 : _dishElement$querySel2.textContent.replace(\'Price: $\', \'\')) || \'\',\n    image: ((_dishElement$querySel3 = dishElement.querySelector(\'img\')) === null || _dishElement$querySel3 === void 0 ? void 0 : _dishElement$querySel3.src) || \'\',\n    description: ((_dishElement$querySel4 = dishElement.querySelector(\'div:nth-child(2) p\')) === null || _dishElement$querySel4 === void 0 ? void 0 : _dishElement$querySel4.textContent) || \'\'\n  };\n\n  // Create edit form\n  var editDiv = document.createElement(\'div\');\n  editDiv.className = \'p-4\';\n  editDiv.innerHTML = getFormHTML(true, dishId, currentValues);\n\n  // Store the original dish element\n  editDiv.originalDish = dishElement;\n\n  // Replace dish with form\n  dishElement.replaceWith(editDiv);\n\n  // Add cancel button functionality\n  editDiv.querySelector(\'.cancel-edit\').addEventListener(\'click\', function () {\n    editDiv.replaceWith(dishElement);\n  });\n\n  // Add form submission handler\n  document.querySelector("#editDish".concat(dishId)).addEventListener(\'submit\', /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(event) {\n      var imageInput, imageData, formData;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            event.preventDefault();\n            imageInput = document.querySelector("#dishImage".concat(dishId));\n            _context4.next = 4;\n            return handleImageUpload(imageInput);\n          case 4:\n            imageData = _context4.sent;\n            // const eatery = JSON.parse(document.getElementById(\'kitchen\').textContent);\n            formData = {\n              name: document.querySelector("#dishName".concat(dishId)).value,\n              price: document.querySelector("#dishPrice".concat(dishId)).value,\n              image: imageData,\n              description: document.querySelector("#dishDescription".concat(dishId)).value\n            };\n            fetch("/".concat(eatery, "/menu/edit_dish/").concat(dishId, "/"), {\n              method: \'PUT\',\n              headers: {\n                \'Content-Type\': \'application/json\',\n                \'X-CSRFToken\': getCookie(\'csrftoken\')\n              },\n              body: JSON.stringify(formData)\n            }).then(/*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(response) {\n                var errorData;\n                return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                  while (1) switch (_context3.prev = _context3.next) {\n                    case 0:\n                      if (response.ok) {\n                        _context3.next = 5;\n                        break;\n                      }\n                      _context3.next = 3;\n                      return response.json();\n                    case 3:\n                      errorData = _context3.sent;\n                      throw new Error(errorData.error || \'Network response was not ok\');\n                    case 5:\n                      return _context3.abrupt("return", response.json());\n                    case 6:\n                    case "end":\n                      return _context3.stop();\n                  }\n                }, _callee3);\n              }));\n              return function (_x4) {\n                return _ref4.apply(this, arguments);\n              };\n            }()).then(function (result) {\n              // Update the dish element with new data\n              var updatedDish = document.createElement(\'article\');\n              updatedDish.id = "o".concat(dishId);\n              updatedDish.className = \'border rounded-lg p-4 mb-4 grid md:grid-cols-3 gap-4\';\n              updatedDish.innerHTML = createDishHTML(dishId, formData, result.image_url);\n\n              // Replace form with updated dish\n              editDiv.replaceWith(updatedDish);\n            })["catch"](function (error) {\n              console.error(\'Error:\', error);\n              if (error.message) {\n                // If we already have an error message (from our throw new Error(data.error))\n                alert(error.message);\n              } else {\n                alert(\'Error updating dish. Please try again.\');\n              }\n            });\n          case 7:\n          case "end":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n}\nfunction submitChanges(dishid) {\n  fetch("/edit_dish/" + dishid, {\n    method: \'POST\',\n    body: JSON.stringify({\n      description: document.querySelector(\'#dishDescription\').value,\n      name: document.querySelector(\'#dishName\').value,\n      price: document.querySelector(\'#dishPrice\').value,\n      image: document.querySelector(\'#dishImage\').value\n    })\n  }).then(function (result) {\n    location.reload();\n  });\n}\n;\nfunction deleteDish(dishId) {\n  if (!confirm(\'Are you sure you want to delete this dish?\')) {\n    return;\n  }\n  var dishElement = document.getElementById("o".concat(dishId));\n  if (!dishElement) {\n    console.error(\'Could not find dish element\');\n    return;\n  }\n\n  // Add loading state\n  dishElement.style.opacity = \'0.5\';\n  var buttons = dishElement.querySelectorAll(\'button\');\n  buttons.forEach(function (button) {\n    return button.disabled = true;\n  });\n  fetch("/delete_dish/".concat(dishId), {\n    method: "DELETE",\n    headers: {\n      \'X-CSRFToken\': getCookie(\'csrftoken\')\n    }\n  }).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\'Network response was not ok\');\n    }\n    return response.json();\n  }).then(function (result) {\n    // Animate the removal\n    dishElement.style.transition = \'all 0.3s ease-out\';\n    dishElement.style.transform = \'translateX(100%)\';\n    dishElement.style.opacity = \'0\';\n    setTimeout(function () {\n      dishElement.remove();\n\n      // Check if this was the last dish in the course\n      var parentPanel = dishElement.closest(\'.accordion-body\');\n      var remainingDishes = parentPanel.querySelectorAll(\'article\').length;\n      if (remainingDishes === 0) {\n        // Add "No dishes" message\n        var emptyMessage = document.createElement(\'p\');\n        emptyMessage.className = \'text-gray-500 text-center py-4\';\n        emptyMessage.textContent = \'No dishes available for this course.\';\n\n        // Insert before the "Add dish" button\n        var addButton = parentPanel.querySelector(\'.text-center\');\n        parentPanel.insertBefore(emptyMessage, addButton);\n      }\n    }, 300); // Match this with the CSS transition time\n  })["catch"](function (error) {\n    console.error(\'Error:\', error);\n    // Restore the dish element state\n    dishElement.style.opacity = \'1\';\n    buttons.forEach(function (button) {\n      return button.disabled = false;\n    });\n    alert(\'Error deleting dish. Please try again.\');\n  });\n}\n\n// function deleteCourse(course) {\n//     const eatery = JSON.parse(document.getElementById(\'kitchen\').textContent);\n//     fetch(\'/delete_course/\' + eatery + "/" + course, {method: "GET"})\n//     .then(result => {\n//         location.reload()\n//     });\n// };\n\nfunction deleteCourse(courseId) {\n  if (!confirm(\'Are you sure you want to delete this course? This will delete all dishes in this course.\')) {\n    return;\n  }\n  var courseElement = document.getElementById("delete".concat(courseId)).closest(\'.mb-4\');\n  var courseName = courseElement.querySelector(\'.accordion-trigger h2\').textContent.trim();\n\n  // Add loading state\n  courseElement.style.opacity = \'0.5\';\n  var buttons = courseElement.querySelectorAll(\'button\');\n  buttons.forEach(function (button) {\n    return button.disabled = true;\n  });\n  fetch("/".concat(eatery, "/menu/delete_course/").concat(courseId, "/"), {\n    method: \'DELETE\',\n    headers: {\n      \'X-CSRFToken\': getCookie(\'csrftoken\')\n    }\n  }).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\'Network response was not ok\');\n    }\n    return response.json();\n  }).then(function (result) {\n    // Animate the course removal\n    courseElement.style.transition = \'all 0.3s ease-out\';\n    courseElement.style.transform = \'translateX(100%)\';\n    courseElement.style.opacity = \'0\';\n\n    // Remove the course from existingCourses array\n    var courseIndex = existingCourses.findIndex(function (course) {\n      return course.toLowerCase() === courseName.toLowerCase();\n    });\n    if (courseIndex > -1) {\n      existingCourses.splice(courseIndex, 1);\n    }\n\n    // Add the course back to the dropdown\n    var dropdown = document.getElementById(\'addCourse\');\n    var option = document.createElement(\'option\');\n    option.value = courseName;\n    option.textContent = courseName;\n\n    // Insert the option in alphabetical order\n    var options = Array.from(dropdown.options);\n    var insertIndex = options.findIndex(function (opt) {\n      return opt.text.toLowerCase() > courseName.toLowerCase();\n    });\n    if (insertIndex === -1) {\n      dropdown.appendChild(option); // Add to end if it should go last\n    } else {\n      dropdown.insertBefore(option, dropdown.options[insertIndex]); // Insert at correct position\n    }\n    setTimeout(function () {\n      courseElement.remove();\n    }, 300);\n  })["catch"](function (error) {\n    console.error(\'Error:\', error);\n    courseElement.style.opacity = \'1\';\n    buttons.forEach(function (button) {\n      return button.disabled = false;\n    });\n    alert(\'Error deleting course. Please try again.\');\n  });\n}\nfunction editCourseDescription(courseId) {\n  var displayDiv = document.getElementById("descriptionDisplay".concat(courseId));\n  var formDiv = document.getElementById("descriptionForm".concat(courseId));\n\n  // Show form, hide display\n  displayDiv.classList.add(\'hidden\');\n  formDiv.classList.remove(\'hidden\');\n\n  // Set textarea value to current description\n  var currentDescription = displayDiv.querySelector(\'p\').textContent;\n  document.getElementById("courseDescription".concat(courseId)).value = currentDescription;\n}\nfunction saveCourseDescription(courseId) {\n  // const eatery = JSON.parse(document.getElementById(\'kitchen\').textContent);\n\n  fetch("/".concat(eatery, "/menu/update_course_description/").concat(courseId, "/"), {\n    method: \'POST\',\n    headers: {\n      \'Content-Type\': \'application/json\',\n      \'X-CSRFToken\': getCookie(\'csrftoken\')\n    },\n    body: JSON.stringify({\n      description: document.querySelector("#courseDescription".concat(courseId)).value\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    var description = document.querySelector("#courseDescription".concat(courseId)).value;\n\n    // Find the parent container - try both possible parent elements\n    var parentContainer = document.getElementById("descriptionForm".concat(courseId));\n    if (!parentContainer) {\n      console.error(\'Could not find description form\');\n      return;\n    }\n    parentContainer = parentContainer.parentElement;\n\n    // Create new container\n    var containerDiv = document.createElement(\'div\');\n    containerDiv.className = \'mb-4\';\n\n    // Create display div\n    var displayDiv = document.createElement(\'div\');\n    displayDiv.id = "descriptionDisplay".concat(courseId);\n    displayDiv.classList.remove(\'hidden\');\n    displayDiv.innerHTML = "\\n            <div class=\\"flex justify-between items-start gap-4\\">\\n                <p class=\\"text-gray-600\\">".concat(description || \'No description added yet.\', "</p>\\n                <button class=\\"editDescription text-blue-500 hover:text-blue-700 flex-shrink-0\\"\\n                        data-course-id=\\"").concat(courseId, "\\">\\n                    <svg class=\\"w-5 h-5\\" fill=\\"none\\" stroke=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n                        <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\\"/>\\n                    </svg>\\n                </button>\\n            </div>\\n        ");\n\n    // Create form div (hidden)\n    var formDiv = document.createElement(\'div\');\n    formDiv.id = "descriptionForm".concat(courseId);\n    formDiv.className = \'mt-2 hidden\';\n    formDiv.innerHTML = "\\n            <textarea id=\\"courseDescription".concat(courseId, "\\" \\n                    class=\\"w-full p-2 border rounded\\"\\n                    rows=\\"3\\"\\n                    placeholder=\\"Add a description for this course\\">").concat(description, "</textarea>\\n            <button class=\\"saveDescription mt-2 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors duration-200\\"\\n                    data-course-id=\\"").concat(courseId, "\\">\\n                Save Description\\n            </button>\\n        ");\n\n    // Add both divs to container\n    containerDiv.appendChild(displayDiv);\n    containerDiv.appendChild(formDiv);\n\n    // Replace the entire parent container\n    parentContainer.replaceWith(containerDiv);\n  })["catch"](function (error) {\n    console.error(\'Error:\', error);\n    alert(\'Error updating description. Please try again.\');\n  });\n}\n\n// Add these new functions\nfunction editCourseNote(courseId) {\n  var displayDiv = document.getElementById("noteDisplay".concat(courseId));\n  var formDiv = document.getElementById("noteForm".concat(courseId));\n\n  // Show form, hide display\n  displayDiv.classList.add(\'hidden\');\n  formDiv.classList.remove(\'hidden\');\n\n  // Set textarea value to current note\n  var currentNote = displayDiv.querySelector(\'p\').textContent;\n  document.getElementById("courseNote".concat(courseId)).value = currentNote;\n}\nfunction saveCourseNote(courseId) {\n  // const eatery = JSON.parse(document.getElementById(\'kitchen\').textContent);\n\n  fetch("/".concat(eatery, "/menu/update_course_note/").concat(courseId, "/"), {\n    method: \'POST\',\n    headers: {\n      \'Content-Type\': \'application/json\',\n      \'X-CSRFToken\': getCookie(\'csrftoken\')\n    },\n    body: JSON.stringify({\n      note: document.querySelector("#courseNote".concat(courseId)).value\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    var note = document.querySelector("#courseNote".concat(courseId)).value;\n\n    // Find the parent container\n    var parentContainer = document.getElementById("noteForm".concat(courseId)).parentElement;\n\n    // Create new container\n    var containerDiv = document.createElement(\'div\');\n    containerDiv.className = \'mb-4\';\n\n    // Create display div\n    var displayDiv = document.createElement(\'div\');\n    displayDiv.id = "noteDisplay".concat(courseId);\n    displayDiv.classList.remove(\'hidden\');\n    displayDiv.innerHTML = "\\n            <div class=\\"flex justify-between items-start gap-4\\">\\n                <p class=\\"text-gray-600\\">".concat(note || \'No note added yet.\', "</p>\\n                <button class=\\"editNote text-blue-500 hover:text-blue-700 flex-shrink-0\\"\\n                        data-course-id=\\"").concat(courseId, "\\">\\n                    <svg class=\\"w-5 h-5\\" fill=\\"none\\" stroke=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n                        <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\\"/>\\n                    </svg>\\n                </button>\\n            </div>\\n        ");\n\n    // Create form div (hidden)\n    var formDiv = document.createElement(\'div\');\n    formDiv.id = "noteForm".concat(courseId);\n    formDiv.className = \'mt-2 hidden\';\n    formDiv.innerHTML = "\\n            <textarea id=\\"courseNote".concat(courseId, "\\" \\n                    class=\\"w-full p-2 border rounded\\"\\n                    rows=\\"3\\"\\n                    placeholder=\\"Add a note for this course\\">").concat(note, "</textarea>\\n            <button class=\\"saveNote mt-2 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors duration-200\\"\\n                    data-course-id=\\"").concat(courseId, "\\">\\n                Save Note\\n            </button>\\n        ");\n\n    // Add both divs to container\n    containerDiv.appendChild(displayDiv);\n    containerDiv.appendChild(formDiv);\n\n    // Replace the entire parent container\n    parentContainer.replaceWith(containerDiv);\n  })["catch"](function (error) {\n    console.error(\'Error:\', error);\n    alert(\'Error updating note. Please try again.\');\n  });\n}\nfunction showSideOptionForm(courseId) {\n  var sideOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var buttonContainer = document.getElementById("addSideButtonContainer".concat(courseId));\n  // Create a new div for the form instead of replacing existing content\n  var formDiv = document.createElement(\'div\');\n  formDiv.id = "addSideButtonContainer".concat(courseId); // Keep the same ID\n  formDiv.className = \'bg-white p-4 rounded-lg border mt-2\';\n  formDiv.innerHTML = "\\n        <h3 class=\\"text-lg font-semibold mb-4\\">".concat(sideOption ? \'Edit\' : \'Add\', " Side Option</h3>\\n        <form id=\\"sideOptionForm\\" class=\\"space-y-4\\">\\n            <div>\\n                <label class=\\"block text-sm font-medium text-gray-700\\">Name</label>\\n                <input type=\\"text\\" id=\\"sideName\\" \\n                       class=\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\\"\\n                       value=\\"").concat(sideOption ? sideOption.name : \'\', "\\" required>\\n            </div>\\n            <div>\\n                <label class=\\"block text-sm font-medium text-gray-700\\">Description</label>\\n                <textarea id=\\"sideDescription\\" \\n                        class=\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\\"\\n                        rows=\\"2\\">").concat(sideOption ? sideOption.description || \'\' : \'\', "</textarea>\\n            </div>\\n            <div class=\\"flex items-center gap-4\\">\\n                <div class=\\"flex items-center\\">\\n                    <input type=\\"checkbox\\" id=\\"isPremium\\" \\n                           class=\\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\\"\\n                           ").concat(sideOption && sideOption.is_premium ? \'checked\' : \'\', ">\\n                    <label class=\\"ml-2 text-sm text-gray-700\\">Premium Side</label>\\n                </div>\\n                <div class=\\"flex-1\\" id=\\"priceField\\" ").concat(sideOption && sideOption.is_premium ? \'\' : \'hidden\', ">\\n                    <label class=\\"block text-sm font-medium text-gray-700\\">Price</label>\\n                    <input type=\\"number\\" id=\\"sidePrice\\" \\n                           class=\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\\"\\n                           step=\\"0.01\\" min=\\"0\\"\\n                           value=\\"").concat(sideOption ? sideOption.price || \'0.00\' : \'0.00\', "\\">\\n                </div>\\n            </div>\\n            <div class=\\"flex justify-end gap-2 mt-4\\">\\n                <button type=\\"button\\" class=\\"cancelSideOption px-4 py-2 text-gray-700 hover:text-gray-900\\">\\n                    Cancel\\n                </button>\\n                <button type=\\"submit\\" class=\\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\\">\\n                    ").concat(sideOption ? \'Save Changes\' : \'Add Side\', "\\n                </button>\\n            </div>\\n        </form>\\n    ");\n\n  // Add the form to the container\n  buttonContainer.replaceWith(formDiv);\n  // const container = document.getElementById(`sideOptionsList${courseId}`);\n  // container.appendChild(formDiv);\n  formDiv.querySelector(\'.cancelSideOption\').addEventListener(\'click\', function () {\n    var newButtonContainer = document.createElement(\'div\');\n    newButtonContainer.id = "addSideButtonContainer".concat(courseId);\n    newButtonContainer.className = \'flex justify-end mt-2\';\n    newButtonContainer.innerHTML = "\\n            <button class=\\"addSideOption text-sm px-3 py-1 bg-green-500 hover:bg-green-600 text-white rounded\\"\\n                    data-course-id=\\"".concat(courseId, "\\">\\n                Add Side\\n            </button>\\n        ");\n    formDiv.replaceWith(newButtonContainer);\n  });\n  // Toggle price field visibility based on premium checkbox\n  var isPremiumCheckbox = formDiv.querySelector(\'#isPremium\');\n  var priceField = formDiv.querySelector(\'#priceField\');\n  isPremiumCheckbox.addEventListener(\'change\', function () {\n    priceField.hidden = !isPremiumCheckbox.checked;\n  });\n\n  // Handle form submission\n  var form = formDiv.querySelector(\'#sideOptionForm\');\n  form.addEventListener(\'submit\', /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(e) {\n      var formData, endpoint, response, result, newButtonContainer;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            e.preventDefault();\n            formData = {\n              name: formDiv.querySelector(\'#sideName\').value,\n              description: formDiv.querySelector(\'#sideDescription\').value,\n              is_premium: formDiv.querySelector(\'#isPremium\').checked,\n              price: formDiv.querySelector(\'#sidePrice\').value || 0,\n              course_id: courseId\n            };\n            _context5.prev = 2;\n            endpoint = sideOption ? "/".concat(eatery, "/menu/side_options/").concat(sideOption.id, "/") : "/".concat(eatery, "/menu/side_options/").concat(courseId, "/");\n            _context5.next = 6;\n            return fetch(endpoint, {\n              method: \'POST\',\n              headers: {\n                \'Content-Type\': \'application/json\',\n                \'X-CSRFToken\': getCookie(\'csrftoken\')\n              },\n              body: JSON.stringify(formData)\n            });\n          case 6:\n            response = _context5.sent;\n            if (response.ok) {\n              _context5.next = 9;\n              break;\n            }\n            throw new Error(\'Network response was not ok\');\n          case 9:\n            _context5.next = 11;\n            return response.json();\n          case 11:\n            result = _context5.sent;\n            // Remove the form\n            newButtonContainer = document.createElement(\'div\');\n            newButtonContainer.id = "addSideButtonContainer".concat(courseId);\n            newButtonContainer.className = \'flex justify-end mt-2\';\n            newButtonContainer.innerHTML = "\\n                <button class=\\"addSideOption text-sm px-3 py-1 bg-green-500 hover:bg-green-600 text-white rounded\\"\\n                        data-course-id=\\"".concat(courseId, "\\">\\n                    Add Side\\n                </button>\\n            ");\n            formDiv.remove();\n\n            // Update the side options list\n            _context5.next = 19;\n            return updateSideOptionsList(courseId);\n          case 19:\n            _context5.next = 25;\n            break;\n          case 21:\n            _context5.prev = 21;\n            _context5.t0 = _context5["catch"](2);\n            console.error(\'Error:\', _context5.t0);\n            alert(\'Error saving side option. Please try again.\');\n          case 25:\n          case "end":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[2, 21]]);\n    }));\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n\n  // Handle cancel button\n  formDiv.querySelector(\'.cancelSideOption\').addEventListener(\'click\', function () {\n    formDiv.remove();\n  });\n}\nfunction editSideOption(_x6) {\n  return _editSideOption.apply(this, arguments);\n}\nfunction _editSideOption() {\n  _editSideOption = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(sideId) {\n    var response, sideOption;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return fetch("/".concat(eatery, "/menu/side_options/").concat(sideId, "/"));\n        case 3:\n          response = _context6.sent;\n          if (response.ok) {\n            _context6.next = 6;\n            break;\n          }\n          throw new Error(\'Network response was not ok\');\n        case 6:\n          _context6.next = 8;\n          return response.json();\n        case 8:\n          sideOption = _context6.sent;\n          showSideOptionForm(sideOption.course_id, sideOption);\n          _context6.next = 16;\n          break;\n        case 12:\n          _context6.prev = 12;\n          _context6.t0 = _context6["catch"](0);\n          console.error(\'Error:\', _context6.t0);\n          alert(\'Error loading side option. Please try again.\');\n        case 16:\n        case "end":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[0, 12]]);\n  }));\n  return _editSideOption.apply(this, arguments);\n}\nfunction deleteSideOption(sideId) {\n  if (!confirm(\'Are you sure you want to delete this side option?\')) {\n    return;\n  }\n\n  // Find the button first, then traverse up to the parent container\n  var deleteButton = document.querySelector("button.deleteSideOption[data-side-id=\\"".concat(sideId, "\\"]"));\n  if (!deleteButton) {\n    console.error(\'Could not find delete button\');\n    return;\n  }\n\n  // Find the side option div directly by ID\n  var sideElement = document.getElementById("sideOption".concat(sideId));\n  if (!sideElement) {\n    console.error(\'Could not find side option element\');\n    return;\n  }\n\n  // Add loading state\n  sideElement.style.opacity = \'0.5\';\n  var buttons = sideElement.querySelectorAll(\'button\');\n  buttons.forEach(function (button) {\n    return button.disabled = true;\n  });\n  fetch("/".concat(eatery, "/menu/side_options/").concat(sideId, "/"), {\n    method: \'DELETE\',\n    headers: {\n      \'X-CSRFToken\': getCookie(\'csrftoken\')\n    }\n  }).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\'Network response was not ok\');\n    }\n    return response.json();\n  }).then(function (result) {\n    sideElement.style.transition = \'all 0.3s ease-out\';\n    sideElement.style.transform = \'translateX(100%)\';\n    sideElement.style.opacity = \'0\';\n    setTimeout(function () {\n      sideElement.remove();\n\n      // Check if this was the last side option\n      var listContainer = document.getElementById("sideOptionsList".concat(result.course_id));\n      var remainingSides = listContainer.querySelectorAll(\'div[data-side-id]\').length;\n      if (remainingSides === 0) {\n        updateSideOptionsList(result.course_id);\n      }\n    }, 300);\n  })["catch"](function (error) {\n    console.error(\'Error:\', error);\n    sideElement.style.opacity = \'1\';\n    buttons.forEach(function (button) {\n      return button.disabled = false;\n    });\n    alert(\'Error deleting side option. Please try again.\');\n  });\n}\nfunction updateSideOptionsList(_x7) {\n  return _updateSideOptionsList.apply(this, arguments);\n}\nfunction _updateSideOptionsList() {\n  _updateSideOptionsList = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(courseId) {\n    var response, data, sideOptions, listContainer, sideOptionsContainer, noOptionsMessage, buttonContainer, parentContainer;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return fetch("/".concat(eatery, "/menu/side_options/").concat(courseId, "/"));\n        case 3:\n          response = _context7.sent;\n          if (response.ok) {\n            _context7.next = 6;\n            break;\n          }\n          throw new Error(\'Network response was not ok\');\n        case 6:\n          _context7.next = 8;\n          return response.json();\n        case 8:\n          data = _context7.sent;\n          console.log(\'Received side options:\', data); // Debug log\n\n          // Ensure sideOptions is an array\n          sideOptions = Array.isArray(data) ? data : []; // Find the main list container\n          listContainer = document.getElementById("sideOptionsList".concat(courseId));\n          if (listContainer) {\n            _context7.next = 15;\n            break;\n          }\n          console.error(\'Could not find list container:\', "sideOptionsList".concat(courseId));\n          return _context7.abrupt("return");\n        case 15:\n          // Clear the entire list container first\n          listContainer.innerHTML = \'\';\n\n          // Create a container for side options\n          sideOptionsContainer = document.createElement(\'div\');\n          sideOptionsContainer.className = \'side-options-container\';\n          listContainer.appendChild(sideOptionsContainer);\n\n          // Add side options in order\n          if (sideOptions.length > 0) {\n            sideOptions.forEach(function (side) {\n              if (!side || !side.id) {\n                console.error(\'Invalid side option:\', side);\n                return;\n              }\n              var sideDiv = document.createElement(\'div\');\n              sideDiv.id = "sideOption".concat(side.id);\n              sideDiv.setAttribute(\'data-side-id\', side.id);\n              sideDiv.className = \'flex justify-between items-center p-2 \' + (side.is_premium ? \'bg-amber-50\' : \'bg-gray-50\') + \' rounded mb-2\';\n              sideDiv.innerHTML = "\\n                    <div>\\n                        <div class=\\"flex items-center gap-2\\">\\n                            <p class=\\"font-medium\\">".concat(side.name || \'\', "</p>\\n                            ").concat(side.is_premium ? "<span class=\\"text-sm text-amber-600 font-medium\\">+$".concat(side.price || \'0.00\', "</span>") : \'\', "\\n                        </div>\\n                        ").concat(side.description ? "<p class=\\"text-sm text-gray-600\\">".concat(side.description, "</p>") : \'\', "\\n                    </div>\\n                    <div class=\\"flex gap-2\\">\\n                        <button class=\\"editSideOption text-blue-500 hover:text-blue-700\\"\\n                                data-side-id=\\"").concat(side.id, "\\">\\n                            <svg class=\\"w-5 h-5\\" fill=\\"none\\" stroke=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n                                <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\\"/>\\n                            </svg>\\n                        </button>\\n                        <button class=\\"deleteSideOption text-red-500 hover:text-red-700\\"\\n                                data-side-id=\\"").concat(side.id, "\\">\\n                            <svg class=\\"w-5 h-5\\" fill=\\"none\\" stroke=\\"currentColor\\" viewBox=\\"0 0 24 24\\">\\n                                <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\\"/>\\n                            </svg>\\n                        </button>\\n                    </div>\\n                ");\n              sideOptionsContainer.appendChild(sideDiv);\n            });\n          } else {\n            // Add "No side options" message if needed\n            noOptionsMessage = document.createElement(\'p\');\n            noOptionsMessage.className = \'text-gray-500 text-center\';\n            noOptionsMessage.textContent = \'No side options available\';\n            sideOptionsContainer.appendChild(noOptionsMessage);\n          }\n\n          // Add the button container\n          buttonContainer = document.createElement(\'div\');\n          buttonContainer.id = "addSideButtonContainer".concat(courseId);\n          buttonContainer.className = \'flex justify-end mt-2\';\n          buttonContainer.innerHTML = "\\n            <button class=\\"addSideOption text-sm px-3 py-1 bg-green-500 hover:bg-green-600 text-white rounded\\"\\n                    data-course-id=\\"".concat(courseId, "\\">\\n                Add Side\\n            </button>\\n        ");\n          parentContainer = listContainer.parentElement;\n          parentContainer.appendChild(buttonContainer);\n          _context7.next = 32;\n          break;\n        case 28:\n          _context7.prev = 28;\n          _context7.t0 = _context7["catch"](0);\n          console.error(\'Error:\', _context7.t0);\n          alert(\'Error updating side options list. Please try again.\');\n        case 32:\n        case "end":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[0, 28]]);\n  }));\n  return _updateSideOptionsList.apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///832\n')}},__webpack_exports__={};__webpack_modules__[832]()})();