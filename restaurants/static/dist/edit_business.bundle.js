(()=>{"use strict";var __webpack_modules__={522:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('/* harmony import */ var _components_toast_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);\n/* harmony import */ var _utils_subpagesAPI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(795);\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n\n\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  var business = JSON.parse(document.getElementById(\'business\').textContent);\n  var map = null;\n  var marker = null;\n\n  // Handle edit buttons\n  document.querySelectorAll(\'.edit-button\').forEach(function (button) {\n    button.addEventListener(\'click\', function () {\n      var fieldContainer = this.closest(\'[data-field]\');\n      var fieldName = fieldContainer.dataset.field;\n      var displayWrapper = fieldContainer.closest(\'.field-display-wrapper\');\n      var editWrapper = displayWrapper.nextElementSibling;\n      displayWrapper.classList.add(\'hidden\');\n      editWrapper.classList.remove(\'hidden\');\n\n      // Initialize map when editing address\n      if (fieldName === \'address\') {\n        initializeMap();\n      }\n    });\n  });\n\n  // Special handling for address field with Google Places Autocomplete\n  var addressField = document.querySelector(\'.address-autocomplete\');\n  if (addressField && window.google) {\n    var autocomplete = new google.maps.places.Autocomplete(addressField, {\n      types: [\'address\']\n    });\n    autocomplete.addListener(\'place_changed\', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var place, response, displayValue, editWrapper, displayWrapper, _response$errors;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            place = autocomplete.getPlace();\n            if (place.formatted_address) {\n              _context.next = 3;\n              break;\n            }\n            return _context.abrupt("return");\n          case 3:\n            // Update map marker if map is initialized\n            if (map && marker && place.geometry) {\n              map.setCenter(place.geometry.location);\n              marker.setPosition(place.geometry.location);\n            }\n            _context.prev = 4;\n            _context.next = 7;\n            return _utils_subpagesAPI_js__WEBPACK_IMPORTED_MODULE_0__/* .api */ .F.editBusiness.updateField(business, \'address\', place.formatted_address);\n          case 7:\n            response = _context.sent;\n            if (!(response.status === \'success\')) {\n              _context.next = 20;\n              break;\n            }\n            (0,_components_toast_js__WEBPACK_IMPORTED_MODULE_1__/* .showToast */ .P)(\'Address updated successfully!\');\n            displayValue = document.querySelector(\'[data-field="address"] .text-gray-900\');\n            displayValue.textContent = response.address;\n\n            // Hide edit wrapper and show display wrapper\n            editWrapper = addressField.closest(\'.field-edit-wrapper\');\n            displayWrapper = editWrapper.previousElementSibling;\n            editWrapper.classList.add(\'hidden\');\n            displayWrapper.classList.remove(\'hidden\');\n\n            // Clean up map\n            map = null;\n            marker = null;\n            _context.next = 21;\n            break;\n          case 20:\n            throw new Error(((_response$errors = response.errors) === null || _response$errors === void 0 ? void 0 : _response$errors[0]) || \'Update failed\');\n          case 21:\n            _context.next = 27;\n            break;\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context["catch"](4);\n            console.error(\'Update failed:\', _context.t0);\n            (0,_components_toast_js__WEBPACK_IMPORTED_MODULE_1__/* .showToast */ .P)(_context.t0.message || \'Failed to update address. Please try again.\', \'error\');\n          case 27:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[4, 23]]);\n    })));\n  }\n\n  // Function to initialize Google Map\n  function initializeMap() {\n    var mapElement = document.getElementById(\'map\');\n    var addressInput = document.querySelector(\'.address-autocomplete\');\n    var currentAddress = addressInput.value;\n    if (!mapElement || !window.google || map) return;\n\n    // Default to a central location if no address\n    var defaultLocation = {\n      lat: 40.7128,\n      lng: -74.0060\n    }; // New York City\n\n    // Initialize the map\n    map = new google.maps.Map(mapElement, {\n      zoom: 15,\n      center: defaultLocation,\n      mapTypeControl: false\n    });\n    marker = new google.maps.Marker({\n      map: map,\n      draggable: false,\n      position: defaultLocation\n    });\n\n    // If we have a current address, geocode it and center the map\n    if (currentAddress) {\n      var geocoder = new google.maps.Geocoder();\n      geocoder.geocode({\n        address: currentAddress\n      }, function (results, status) {\n        if (status === \'OK\' && results[0]) {\n          var location = results[0].geometry.location;\n          map.setCenter(location);\n          marker.setPosition(location);\n        }\n      });\n    }\n  }\n\n  // Handle save buttons for other fields\n  document.querySelectorAll(\'.save-button\').forEach(function (button) {\n    button.addEventListener(\'click\', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var editWrapper, displayWrapper, fieldContainer, fieldName, input, value, displayValue, response, _response$errors2;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            editWrapper = this.closest(\'.field-edit-wrapper\');\n            displayWrapper = editWrapper.previousElementSibling;\n            fieldContainer = displayWrapper.querySelector(\'[data-field]\');\n            fieldName = fieldContainer.dataset.field;\n            input = editWrapper.querySelector("[name=\\"".concat(fieldName, "\\"]"));\n            value = input.value;\n            displayValue = fieldContainer.querySelector(\'.text-gray-900\');\n            _context2.prev = 7;\n            _context2.next = 10;\n            return _utils_subpagesAPI_js__WEBPACK_IMPORTED_MODULE_0__/* .api */ .F.editBusiness.updateField(business, fieldName, value);\n          case 10:\n            response = _context2.sent;\n            if (!(response.status === \'success\')) {\n              _context2.next = 18;\n              break;\n            }\n            (0,_components_toast_js__WEBPACK_IMPORTED_MODULE_1__/* .showToast */ .P)(\'Changes saved successfully!\');\n            displayValue.textContent = response[fieldName];\n            editWrapper.classList.add(\'hidden\');\n            displayWrapper.classList.remove(\'hidden\');\n            _context2.next = 19;\n            break;\n          case 18:\n            throw new Error(((_response$errors2 = response.errors) === null || _response$errors2 === void 0 ? void 0 : _response$errors2[0]) || \'Update failed\');\n          case 19:\n            _context2.next = 25;\n            break;\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2["catch"](7);\n            console.error(\'Update failed:\', _context2.t0);\n            (0,_components_toast_js__WEBPACK_IMPORTED_MODULE_1__/* .showToast */ .P)(_context2.t0.message || \'Failed to update. Please try again.\', \'error\');\n          case 25:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, this, [[7, 21]]);\n    })));\n  });\n\n  // Handle cancel buttons\n  document.querySelectorAll(\'.cancel-button\').forEach(function (button) {\n    button.addEventListener(\'click\', function () {\n      var editWrapper = this.closest(\'.field-edit-wrapper\');\n      var displayWrapper = editWrapper.previousElementSibling;\n      editWrapper.classList.add(\'hidden\');\n      displayWrapper.classList.remove(\'hidden\');\n    });\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///522\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,B,F,U)=>{if(!B){var s=1/0;for(n=0;n<deferred.length;n++){for(var[B,F,U]=deferred[n],e=!0,E=0;E<B.length;E++)(!1&U||s>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](B[E])))?B.splice(E--,1):(e=!1,U<s&&(s=U));if(e){deferred.splice(n--,1);var t=F();void 0!==t&&(Q=t)}}return Q}U=U||0;for(var n=deferred.length;n>0&&deferred[n-1][2]>U;n--)deferred[n]=deferred[n-1];deferred[n]=[B,F,U]},__webpack_require__.d=(Q,B)=>{for(var F in B)__webpack_require__.o(B,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:B[F]})},__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B),(()=>{var Q={760:0};__webpack_require__.O.j=B=>0===Q[B];var B=(B,F)=>{var U,s,[e,E,t]=F,n=0;if(e.some((B=>0!==Q[B]))){for(U in E)__webpack_require__.o(E,U)&&(__webpack_require__.m[U]=E[U]);if(t)var x=t(__webpack_require__)}for(B&&B(F);n<e.length;n++)s=e[n],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(x)},F=self.webpackChunkstatic=self.webpackChunkstatic||[];F.forEach(B.bind(null,0)),F.push=B.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[76],(()=>__webpack_require__(522)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();